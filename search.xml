<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[原型链 继承]]></title>
    <url>%2F2017%2F12%2F14%2F%E5%8E%9F%E5%9E%8B%E9%93%BE%20%E7%BB%A7%E6%89%BF%2F</url>
    <content type="text"><![CDATA[什么是原型链？有如下代码：12345678function Person(name)&#123; this.name = name;&#125;Person.prototype.sayName = function()&#123; console.log(&apos;My name is :&apos; + this.name);&#125;var p = new Person(&quot;maj&quot;)p.sayName(); 以上代码中 Person 是构造函数 P是用Person构造函数所创建的实例 Person.prototype是构造函数的原型对象 Person.prototype.constructor === Person(原型对象的constructor属性又指回构造函数) P.__proto__ 指向Person.prototype(实例的[[prototype]]指向其构造函数的原型对象) P.constructor 也指向Person构造函数(事实上P本身是没有constructor属性的，这里P的constructor就是P.__proto__ .constructor) 可以看出，P的toString()方法也是通过原型链继承得来的(其他所有非自身创建的方法同理)当对象P没有toString()时，他会在__proto__ 中寻找，没有的话继续沿着__proto__ 向上，直到在原始对象Object中找到了toString方法，由__proto__ 一层一层构成的链接，就叫原型链 理解继承机制，我们可以为所有的string类型添加一个共同的方法12345678910111213141516171819202122//检测字符串中出现频率最高的字母String.prototype.getMostOften = function()&#123; var obj = &#123;&#125;,max = 0, maxChar; for(var i = 0;i&lt;this.length;i++)&#123; var char = this.charAt(i); if(obj[char])&#123; obj[char]++; &#125;else&#123; obj[char] = 1; &#125; &#125; for(var key in obj)&#123; if(obj[key]&gt;max)&#123; max = obj[key]; maxChar = key; &#125; &#125; return maxChar;&#125;;var str = &apos;ahbbccdeddddfg&apos;;var ch = str.getMostOften();console.log(ch); //d instanceOf instanceOf 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性 使用instanceOf会沿着对象的原型链去寻找constructor属性，来判断是否指向某个构造函数，返回true OR false 继承继承可以使一个对象使用另一个对象的属性和方法 下面两种写法的区别1234567891011121314151617181920//方法1function People(name, sex)&#123; this.name = name; this.sex = sex; this.printName = function()&#123; console.log(this.name); &#125;&#125;var p1 = new People(&apos;马江波&apos;, 21)//方法2function Person(name, sex)&#123; this.name = name; this.sex = sex;&#125;Person.prototype.printName = function()&#123; console.log(this.name);&#125;var p1 = new Person(&apos;maj&apos;, 21); 用第一种构造函数所创建的实例所使用的printName方法是独立的，单独储存的，占用资源较大第二种将printName方法写到prototype中，使所有创建的实例能够共享此方法，节省内存，提高性能 hasOwnProperty 作用：hasOwnProperty() 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性语法：obj.hasOwnProperty(prop) 使用call实现继承12345678function Person(name, sex)&#123; this.name = name; this.sex = sex;&#125;function Male(name, sex, age)&#123; Person.call(this, name, sex); //这里的 call 有什么作用 this.age = age;&#125; 再Male构造函数中通过call()方法引入person函数，可以使用Person的属性、方法，实现了继承]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>prototype</tag>
        <tag>原型链</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向对象]]></title>
    <url>%2F2017%2F12%2F10%2FOOP%2F</url>
    <content type="text"><![CDATA[OOP是什么 面向对象程序设计(Object Oriented Programming)：是种具有对象概念的程序编程典范，同时也是一种程序开发的抽象方针。它可能包含数据、属性、代码与方法。对象则指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。在面向对象程序编程里，计算机程序会被设计成彼此相关的对象。面向对象有三大特性：封装，继承，多态 如何通过构造函数的方式创建一个拥有属性和方法的对象?1234567891011function Person(name,age,sex)&#123; this.name = name; this.age = age; this.sex = sex; this.sayName = function()&#123; console.log(this.name); &#125;&#125;var person1 = new Person(&apos;jirengu&apos;,23,&apos;male&apos;);var person2 = new Person(&apos;jrg&apos;,21,&apos;female&apos;); prototype 是什么？有什么特性 我们创建的每个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法，如果按照字面意思来理解，那么prototype就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，我们不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中。1234567891011function Person()&#123; this.prototype.name = &apos;jirengu&apos;; this.prototype.age = 23; this.prototype.sex = male; this.prototype.sayName = function()&#123; console.log(this.name); &#125;&#125;var person1 = new Person();person1.sayName() // jirengu 画出如下代码的原型图12345678910111213function People (name)&#123; this.name = name; this.sayName = function()&#123; console.log(&apos;my name is:&apos; + this.name); &#125;&#125;People.prototype.walk = function()&#123; console.log(this.name + &apos; is walking&apos;); &#125;var p1 = new People(&apos;饥人谷&apos;);var p2 = new People(&apos;前端&apos;); 创建一个 Car 对象，拥有属性name、color、status；拥有方法run，stop，getStatus123456789101112131415161718192021function AutoMobile(name,color,status)&#123; this.name = name; this.color = color; this.status = status; AutoMobile.prototype.run = function()&#123; this.status = &quot;run&quot;; console.log(&quot;It&apos;s running&quot;); &#125;; AutoMobile.prototype.stop = function()&#123; this.status = &quot;stop&quot;; console.log(&quot;It&apos;s stoped&quot;); &#125;; AutoMobile.prototype.getStatus = function()&#123; console.log(this.status); &#125;; &#125;var Car = new AutoMobile(&apos;Cadillac&apos;,&apos;black&apos;,&apos;stop&apos;); 使用木桶布局实现一个图片墙]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>OOP</tag>
        <tag>prototype</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[瀑布流布局]]></title>
    <url>%2F2017%2F12%2F03%2F%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[什么是瀑布流布局高度不一的多个元素展示在页面上时，第一排元素按顺序排列，第二排元素排列的顺序则根据第一排元素占用的高度计算出高度最小的元素，排在其后，以此类推形成瀑布流布局当一个页面中要展示多个高度不相等的元素时(通常为图片，新闻卡片等)，为了使页面规整，美观，则选用瀑布流布局 以下是效果预览链接以及实现代码瀑布流布局效果 HTML12345678910111213141516171819202122232425&lt;body&gt; &lt;div class=&quot;ct&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;5&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;6&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;7&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;8&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;9&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;10&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;11&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;12&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;13&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;14&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;15&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;16&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;17&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;18&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;19&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;20&lt;/div&gt; &lt;/div&gt; &lt;script src=&quot;http://code.jquery.com/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;&lt;/body&gt; CSS1234567891011.ct&#123; position: relative;&#125;.item&#123; position: absolute; border: 1px solid; width: 180px; margin:5px; transition: all 1s; background-color: rgb(0, 153, 255);&#125; JS12345678910111213141516171819202122232425262728293031var $items = $(&apos;.ct .item&apos;);function randomHig()&#123; return Math.floor((Math.random()+1)*10)*8 + 150 +&apos;px&apos;;&#125;$items.each(function()&#123; $(this).height(randomHig());&#125;);waterFull();$(window).resize(function()&#123; waterFull();&#125;);function waterFull() &#123; var $winWidth = $(window).width(); var colLength = parseInt($winWidth/$items.outerWidth(true)); var arr = []; for (var i = 0; i &lt; colLength; i++) &#123; arr[i] = 0; &#125; $items.each(function () &#123; var minItems = Math.min.apply(Math, arr); var minIndex = arr.indexOf(minItems); $(this).css(&#123; top: arr[minIndex], left: $items.outerWidth(true) * minIndex &#125;); arr[minIndex] += $(this).outerHeight(true); &#125;);&#125;]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>瀑布流布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片轮播效果]]></title>
    <url>%2F2017%2F12%2F01%2Fjs%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[轮播的实现原理 提供一个展示窗口将要展示的内容定位到窗口位置 只展示一张图片，将剩余的内容隐藏 根据用户的操作（左翻右翻等）展示其余的内容并伴有过渡动画 最后一张图片与第一张视觉上要有衔接的效果 以下是是两种轮播效果预览链接以及实现的代码渐变轮播效果滚动轮播效果 HTML1234567891011121314151617181920&lt;body&gt; &lt;div class=&quot;show&quot;&gt; &lt;div class=&quot;carousel&quot;&gt; &lt;li&gt;&lt;img src=&quot;http://cdn.jirengu.com/book.jirengu.com/img/2.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;http://cdn.jirengu.com/book.jirengu.com/img/3.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;http://cdn.jirengu.com/book.jirengu.com/img/4.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;img src=&quot;http://cdn.jirengu.com/book.jirengu.com/img/5.jpg&quot; alt=&quot;&quot;&gt;&lt;/li&gt; &lt;/div&gt; &lt;span class=&quot;previous&quot;&gt;&lt;&lt;/span&gt; &lt;span class=&quot;next&quot;&gt;&gt;&lt;/span&gt; &lt;ul class=&quot;directive&quot;&gt; &lt;li class=&quot;active&quot;&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;li&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script src=&quot;https://code.jquery.com/jquery-2.1.2.min.js&quot;&gt;&lt;/script&gt;&lt;/body&gt; CSS12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273* &#123; margin: 0; padding: 0; list-style: none;&#125;.show &#123; position: relative; left: 50%; margin: 50px 0 0 -160px; width: 320px; height: 240px;&#125;.carousel li &#123; position: absolute; width: 320px; height: 240px;&#125;.carousel img &#123; width: 100%;&#125;.show span &#123; border: 1px solid #ccc; color: white; border-radius: 50%; padding: 5px; width: 20px; height: 20px; text-align: center; line-height: 100%; cursor: pointer; user-select: none;&#125;.show .previous &#123; position: absolute; top: 50%; margin-top: -10px; left: 10px;&#125;.show .next &#123; position: absolute; top: 50%; margin-top: -10px; right: 10px;&#125;.directive &#123; position: absolute; display: flex; justify-content: space-between; width: 50%; margin-left: -25%; bottom: 20px; left: 50%; z-index: 1;&#125;.directive li &#123; width: 20%; height: 5px; border: 1px solid #fff; border-radius: 5px; cursor: pointer;&#125;.active &#123; background: #ddd;&#125; JS(渐变效果)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253var $pre = $(&apos;.show .previous&apos;);var $next = $(&apos;.show .next&apos;);var $imgList = $(&apos;.carousel li&apos;);var $len = $(&apos;.carousel li&apos;).length;var $directive = $(&apos;.directive li&apos;);var isAnimate = false;var imgIndex = 0;$imgList .css(&apos;display&apos;, &apos;none&apos;) .eq(0) .css(&apos;display&apos;, &apos;block&apos;);$next.on(&apos;click&apos;, function () &#123; cutover((imgIndex + 1) % $len);&#125;);$pre.on(&apos;click&apos;, function () &#123; cutover((imgIndex - 1 + $len) % $len);&#125;);$directive.click(function () &#123; var index = $(this).index(); if (index === imgIndex) &#123; return; &#125; cutover(index);&#125;);function cutover(n) &#123; if (isAnimate) return; isAnimate = true; $imgList .eq(imgIndex) .fadeOut(500); $imgList .eq(n) .fadeIn(500, function () &#123; isAnimate = false; &#125;); imgIndex = n; $directive .removeClass(&apos;active&apos;) .eq(imgIndex) .addClass(&apos;active&apos;);&#125;setInterval(function () &#123; cutover((imgIndex + 1) % $len);&#125;, 2000); JS(滚动轮播效果)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374var $pre = $(&apos;.show .previous&apos;);var $next = $(&apos;.show .next&apos;);var $imgList = $(&apos;.carousel li&apos;);var $carousel = $(&apos;.carousel&apos;);var $imgWidth = $(&apos;.carousel img&apos;).width();var $directive = $(&apos;.directive li&apos;);var isAnimate = false;var imgIndex = 1;$(&apos;.carousel&apos;).append($imgList.first().clone());$(&apos;.carousel&apos;).prepend($imgList.last().clone());$next.on(&apos;click&apos;, function () &#123; cutoverNext(imgIndex);&#125;);$pre.on(&apos;click&apos;, function () &#123; cutoverPre(imgIndex);&#125;);$directive.click(function () &#123; var index = $(this).index() + 1; if (index &lt; imgIndex) &#123; imgIndex = index + 1; cutoverPre(imgIndex); &#125; else if (index &gt; imgIndex) &#123; imgIndex = index - 1; cutoverNext(imgIndex); &#125;&#125;);function cutoverNext(n) &#123; var moveWidth = (n + 1) * -$imgWidth; if(isAnimate) return; isAnimate = true; $carousel.animate(&#123; left: moveWidth &#125;, function () &#123; imgIndex++; if (imgIndex === $imgList.length + 1) &#123; $carousel.css(&apos;left&apos;, -$imgWidth); imgIndex = 1; &#125; else &#123; $carousel.css(&apos;left&apos;, moveWidth); &#125; $directive .removeClass(&apos;active&apos;) .eq(imgIndex - 1) .addClass(&apos;active&apos;); isAnimate = false; &#125;);&#125;function cutoverPre(n) &#123; var moveWidth = (n - 1) * -$imgWidth; if(isAnimate) return; isAnimate = true; $carousel.animate(&#123; left: moveWidth &#125;, function () &#123; imgIndex--; if (imgIndex === 0) &#123; $carousel.css(&apos;left&apos;, -$imgWidth * $imgList.length); imgIndex = $imgList.length; &#125; else &#123; $carousel.css(&apos;left&apos;, moveWidth); &#125; $directive .removeClass(&apos;active&apos;) .eq(imgIndex - 1) .addClass(&apos;active&apos;); isAnimate = false; &#125;);&#125;]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>轮播效果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[懒加载]]></title>
    <url>%2F2017%2F11%2F22%2FlazyLoad%2F</url>
    <content type="text"><![CDATA[如何判断一个元素是否出现在窗口可视范围12345678910function isVisible($img)&#123; var winHeight = $(window).height(); var scrollTop = $(window).scrollTop(); var offsetTop = $img.offset().top; if(winHeight + scrollTop &gt; offsetTop &amp;&amp; offsetTop &gt; scrollTop)&#123; return true; &#125; return false;&#125; 当窗口滚动时，判断一个元素是不是出现在窗口可视范围12345678910 $(window).on(&apos;scroll&apos;,function()&#123; var winHeight = $(window).height(); var scrollTop = $(window).scrollTop(); var offsetTop = $node.offset().top;if(winHeight + scrollTop &gt; offsetTop &amp;&amp; offsetTop &gt; scrollTop)&#123; console.log(true);&#125;&#125;); &#125; 当窗口滚动时，判断一个元素是不是出现在窗口可视范围。检测元素第一次出现的时机1234567891011 $(window).on(&apos;scroll&apos;,function()&#123; var winHeight = $(window).height(); var scrollTop = $(window).scrollTop(); var offsetTop = $node.offset().top; if($node.attr(&apos;browsed&apos;))&#123; return; &#125;else if(winHeight + scrollTop &gt; offsetTop &amp;&amp; offsetTop &gt; scrollTop)&#123; console.log(true); $node.attr(&apos;browsed&apos;,&apos; &apos;); &#125;&#125;); 图片懒加载的原理页面一开始只展示一屏图片，剩余的图片将图片url地址写入其他属性中来减小服务请求，当检测到用户滚动窗口继续浏览时，将图片url写入src属性中，根据用户浏览的位置加载对应的图片。 实现图片懒加载]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>懒加载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jQuery简介]]></title>
    <url>%2F2017%2F11%2F16%2FjQuery%2F</url>
    <content type="text"><![CDATA[jQuery能做什么？jQuery库为Web脚本编程提供了通用(跨浏览器)的抽象层，使得它几乎适用于任何脚本编程的情形。jQuery通常能为我们提供以下功能： 选择网页元素 改变结果集 元素的操作：取值和赋值 元素的操作：移动 元素的操作：复制、删除和创建 工具方法 事件操作 特殊效果 AJAX jQuery对象与原生DOM对象 jQuery对象是一个类数组对象，DOM对象是文档节点. jQuery中绑定事件jQuery版本1.7后统一使用on/off来绑定和解绑事件 1234567 $(&apos;button&apos;).on(&apos;click&apos;,function()&#123; console.log(1);&#125;)//////使用on绑定事件使用事件代理$(&apos;.ct&apos;).on(&apos;click&apos;,&apos;button&apos;,function()&#123; console.log(this)&#125;) .bind()方法用于直接附加一个事件处理程序到元素上。在.bind()绑定事件的时候，这些元素必须已经存在.unbind()用于解绑.bind().delegate()动态绑定事件,基于一个指定的根元素的子集，匹配的元素包括那些目前已经匹配到的元素，也包括那些今后可能匹配到的元素 jQuery展示/隐藏元素jQuery的 .hide()方法可以隐藏元素，show()展示元素toggle()切换状态（隐藏/展示） jQuery动画动画使用：.animate( properties [, duration ] [, easing ] [, complete ] )其中properties表示一个CSS属性和值的对象,动画将根据这组对象移动。complete表示动画完成后执行的函数123456789$(&apos;#clickme&apos;).click(function() &#123; $(&apos;#book&apos;).animate(&#123; opacity: 0.25, left: &apos;+=50&apos;, height: &apos;toggle&apos; &#125;, 5000, function() &#123; // Animation complete. &#125;); &#125;); jQuery操作页面html、text123456789&lt;body&gt; &lt;div class= &apos;&apos;box&apos;&apos;&gt; &lt;li&gt;第一行&lt;/li&gt; &lt;li&gt;第二行&lt;/li&gt; &lt;li&gt;第三行&lt;/li&gt; &lt;/div&gt;&lt;/body&gt; jQuery获取表单输入内容与增删元素属性&lt;input type=&quot;text&quot; id=&quot;ipt&quot; placeholder=&quot;click to input&quot;&gt; 获取元素属性：.attr(attributeName)设置、增加元素属性：attr(attributeName,value)移除元素属性：removeAttr(attributeName) menu浏览效果 商品展示效果 jquery动画tab切换]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[跨域]]></title>
    <url>%2F2017%2F10%2F22%2F%E8%B7%A8%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[同源策略 一个源的定义如果协议，端口（如果指定了一个）和域名对于两个页面是相同的，则两个页面具有相同的源。同源策略限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。 跨域有几种实现形式出于安全方面考虑，浏览器根据同源策略来限制不同源的页面之间的交互，虽然这些限制是必要的，但是有时很不方便，合理的用途也受到影响，跨域就是去规避浏览器同源策略的限制来实现你想要的功能，目前跨域一般使用JSONP与CORS，特殊情况下有降域与postMessage等方法 JSONP由于同源策略使得网页无法访问与其不同源的网页的内容，但是在web页面中，js文件的调用不受同源策略的影响，因此可以在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据,为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。 CORSCORS是一个W3C标准，全称是”跨域资源共享“（Cross-origin resource sharing）。它允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。整个CORS通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS通信与同源的AJAX通信没有差别，代码完全一样。浏览器一旦发现AJAX请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。因此，实现CORS通信的关键是服务器。只要服务器实现了CORS接口，就可以跨源通信。（浏览器必须IE10以上才支持） 降域相同父级域名下的两个子页面需要相互访问时使用document.domain = &#39;xxx.com&#39;(相同的父级域名)即可` 1234567891011121314151617181920212223242526//页面A&lt;body&gt; &lt;div class=&quot;main&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;http://a.jrg.com/a.html&quot;&gt; &lt;/div&gt; &lt;iframe src=&quot;http://b.jrg.com/b.html&quot; frameborder=&quot;1&quot;&gt;&lt;/iframe&gt; &lt;script&gt; document.querySelector(&apos;.main input&apos;).addEventListener(&apos;input&apos;, function () &#123; window.frames[0].document.querySelector(&apos;input&apos;).value = this.value &#125;) document.domain = &apos;jrg.com&apos; &lt;/script&gt;&lt;/body&gt;/////////////////////////////////////////////////&lt;body&gt;//页面B &lt;div class=&quot;ct&quot;&gt; &lt;input type=&quot;text&quot; placeholder=&quot;http://b.jrg.com/b.html&quot;&gt; &lt;/div&gt; &lt;script&gt; document.querySelector(&apos;input&apos;).addEventListener(&apos;input&apos;, function () &#123; window.parent.document.querySelector(&apos;input&apos;).value = this.value &#125;) document.domain = &apos;jrg.com&apos; &lt;/script&gt;&lt;/body&gt;]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>跨域</tag>
        <tag>JSONP</tag>
        <tag>CORS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ajax]]></title>
    <url>%2F2017%2F10%2F11%2Fajax%2F</url>
    <content type="text"><![CDATA[Ajax简介 AJAX不是JavaScript的规范，它只是一个缩写：Asynchronous JavaScript and XML，意思就是用JavaScript执行异步网络请求。 如果仔细观察一个Form的提交，你就会发现，一旦用户点击“Submit”按钮，表单开始提交，浏览器就会刷新页面，然后在新页面里告诉你操作是成功了还是失败了。如果不幸由于网络太慢或者其他原因，就会得到一个404页面。这就是Web的运作原理：一次HTTP请求对应一个页面。如果要让用户留在当前页面中，同时发出新的HTTP请求，就必须用JavaScript发送这个新请求，接收到数据后，再用JavaScript更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。最早大规模使用AJAX的就是Gmail，Gmail的页面在首次加载后，剩下的所有数据都依赖于AJAX来更新。用JavaScript写一个完整的AJAX代码并不复杂，但是需要注意：AJAX请求是异步执行的，也就是说，要通过回调函数获得响应。 使用Ajax使用ajax,我们首先要认识XMLHttpRequest对象，XMLHttpRequest对象用于在后台与服务器交换数据,使用：1var xhr = new XMLHttpRequest() 我么就创建了一XMLHttpRequest对象在使用时，有三个步骤，首先调用的是xhr.open()方法1xhr.open(get,&quot;example.com&quot;,true) 此方法接受的第一个参数是请求类型，你可以使用get,post,head或者其它服务器支持的方法第二个参数是指向的url，一般指向服务器地址第三个布尔值表示是否异步，默认为true 事实上调用open()方法并不会真正发送请求，只是启动一个请求以备发送 要发送请求还需要调用send()方法调用方法很简单，就像下面这样：1xhr.send() 使用之后，请求就会发送出去 虽然我们已经可以成功的使用ajax发送请求了，但这还不够，当服务器接收到请求之后，会做出响应，我们需要能够接收到来自服务器的响应，与响应相关的属性如下：responseText:作为响应主体返回的文本status:响应的http状态readyState:相应阶段，分为0-4共五个相应阶段，通常当值为4时代表已接收完成来自服务器端的响应readyState属性每次变化时会触发readyStateChange事件，所以我们利用这个事件处理程序对来自服务器的数据进行操作在ajax异步请求中，必须在使用open()方法之前调用nonreadyStateChange事件处理程序代码如下：123456789101112var xhr = new XMLHttpRequest()xhr.onreadyStateChange = function()&#123; if(xhr.readyState === 4)&#123; if(xhr.status === 200 || xhr.status === 304)&#123; console.log(reponseText) &#125;else&#123; console.log(&quot;请求错误&quot;) &#125; &#125;&#125;xhr.open(get,&quot;example.com&quot;,true)xhr.send() 前后端开发联调注意事项，后端接口完成前如何 mock 数据？前后端联调需要： 约定接口类型(get/post)和名称 约定前端发送数据的类型及格式 约定后端响应返回的数据类型及格式 mock数据：可以使用server mock搭建本地服务器，用router.js文件模拟网站后端 点击按钮，使用 ajax 获取数据，如何在数据到来之前防止重复点击在按钮点击下至获取到数据之前这段时间，屏蔽掉按键所绑定的事件，使之在这一段时间之内的点击是无效的即可，以下是代码：12345678910111213141516171819var dataArrive = true; btn.addEventListener(&apos;click&apos;, function () &#123; if(!dataArrive) return; var xhr = new XMLHttpRequest(); xhr.onreadystatechange = function () &#123; if(xhr.readyState === 4)&#123; if(xhr.status === 200 || xhr.status === 304)&#123; //... &#125; else console.log(&apos;出错了，请稍后再试&apos;); isArrive = true; &#125; &#125;; xhr.open(&apos;get&apos;, &apos;/load&apos;, true); xhr.send(); isArrive = false; &#125;);]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>ajax</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[闭包 BOM]]></title>
    <url>%2F2017%2F09%2F26%2F%E9%97%AD%E5%8C%85%20BOM%2F</url>
    <content type="text"><![CDATA[下面的代码输出什么,修改代码让 fnArri 输出 i123456789101112131415161718192021222324252627 var fnArr = []; for (var i = 0; i &lt; 10; i ++) &#123; fnArr[i] = function()&#123; return i; &#125;; &#125; console.log( fnArr[3]() ); // 输出10//////////方法一：用一个立即执行函数包裹起来，传递参数i var fnArr = []; for (var i = 0; i &lt; 10; i++) &#123; !function (i) &#123; fnArr[i] = function () &#123; return i; &#125;; &#125;(i) &#125; console.log(fnArr[3]()); //输出3 ////////////////方法二： 使用es6中的let声明替换var声明 var fnArr = []; for (let i = 0; i &lt; 10; i ++) &#123; fnArr[i] = function()&#123; return i; &#125;; &#125; console.log( fnArr[3]() ); //输出3 封装一个Car对象，可以通过如下方式获取Car的状态12345678910111213141516171819202122232425262728293031323334353637383940414243var Car = (function()&#123; var speed = 0; function setSpeed(s)&#123; speed = s &#125; function getSpeed()&#123; return speed &#125; function accelerate()&#123; speed += 10 &#125; function decelerate()&#123; speed -= 10 &#125; function getStatus()&#123; if(speed &gt; 0)&#123; return &apos;running&apos; &#125; else&#123; return &apos;stop&apos; &#125; &#125; return &#123; setSpeed: setSpeed, getSpeed: getSpeed, accelerate:accelerate, decelerate: decelerate, getStatus: getStatus &#125;&#125;)()console.log( Car.setSpeed(30), Car.getSpeed(), //30 Car.accelerate(), Car.getSpeed(), //40; Car.decelerate(), Car.decelerate(), Car.getSpeed(), //20 Car.getStatus(), // &apos;running&apos;; Car.decelerate(), Car.decelerate(), Car.getStatus(), //&apos;stop&apos;; Car.speed //error ) 下面这段代码输出结果是怎样的1234567891011var a = 1;setTimeout(function()&#123; a = 2; console.log(a); // 2,打印的是它所在函数作用域的a的值&#125;, 0);var a ;console.log(a); // 1，打印的是全局作用域下啊a=1的值a = 3;console.log(a) // 3，将a赋值为3之后打印出来 //输出结果： 1 3 2 ，因为setTimeout定时器中的函数最后执行 下面这段代码输出结果是怎样的123456var flag = true;setTimeout(function()&#123; flag = false;&#125;,0)while(flag)&#123;&#125; // 当代码执行到这一行的时候，此时flag为true，进入死循环，所以无输出console.log(flag) 下面这段代码输出？如何输出delayer: 0, delayer:1…（使用闭包来实现）1234567891011121314151617for(var i=0;i&lt;5;i++)&#123; setTimeout(function()&#123; console.log(&apos;delayer:&apos; + i ); &#125;, 0); console.log(i); &#125; //输出： 0 1 2 3 4 delayer:5(5次)//////////////////////////////////以下代码输出 delayer：0 delayer：1 ...for(var i = 0; i&lt;5; i++)&#123; setTimeout((function (j)&#123; return function()&#123; console.log(&apos;delayer:&apos;+ j) &#125; &#125;)(i),0) console.log(i)&#125; 获取元素的真实宽高 Window.getComputedStyle() 方法给出应用活动样式表后的元素的所有CSS属性的值，并解析这些值可能包含的任何基本计算。 let style = window.getComputedStyle(element, [pseudoElt]); 12345678910111213141516&lt;style&gt; #box&#123; background: #ccc; width: 112px; height: 223px; &#125;&lt;/style&gt; &lt;div id=&quot;box&quot;&gt;content&lt;/div&gt;&lt;script&gt; var div = document.getElementById(&apos;box&apos;) window.getComputedStyle(&apos;div&apos;).width // &apos;112px&apos; window.getComputedStyle(&apos;div&apos;).height // &apos;233px&apos;&lt;/script&gt; URL如何编码解码之所以URL需要编码是因为Url中有些字符会引起歧义。在因特网中URL只能使用 ASCII 字符集来进行发送。也就是说URL只能使用英文字母、阿拉伯数字和某些标点符号，不能使用其他文字和符号。这意味着 如果URL中有汉字，就必须编码后使用。还有Ukey=value这种传参方式式中， Value中包含 ?或者 = 怎么办呢，那么势必会造成接收Url的服务器解析错误，因此必须将引起歧义的&amp;和=符号进行转义，也就是对其进行编码。 Javascript中提供了3对函数用来对Url编码以得到合法的Url，它们分别是escape / unescape, encodeURI / decodeURI和encodeURIComponent / decodeURIComponent。由于解码和编码的过程是可逆的，因此这里只解释编码的过程。 这三个编码的函数——escape，encodeURI，encodeURIComponent——都是用于将不安全不合法的Url字符转换为合法的Url字符表示，它们安全字符不同： 下面列出了这三个函数的安全字符（即函数不会对这些字符进行编码）escape（69个）：*/@+-._0-9a-zA-ZencodeURI（82个）：!#$&amp;&#39;()*+,/:;=?@-._~0-9a-zA-ZencodeURIComponent（71个）：!&#39;()*-._~0-9a-zA-Z 判断用户的浏览器类型123456789101112function isAndroid()&#123; return /Android/.test(window.navigator.userAgent);&#125;function isIphone()&#123; return /iPhone/.test(window.navigator.userAgent);&#125;function isIpad()&#123; return /iPad/.test(window.navigator.userAgent);&#125;function isIOS()&#123; return /(iPad)|(iPhone)/.test(window.navigator.userAgent);&#125;]]></content>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS事件监听处理]]></title>
    <url>%2F2017%2F09%2F05%2FJS%E4%BA%8B%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[DOM0 事件和DOM2级在事件监听使用方式上有什么区别？1234567891011121314151617181920&lt;html&gt; &lt;button id=&quot;btn&quot;&gt;click me&lt;/button&gt; &lt;script&gt; var btn = document.getElementById(&apos;btn&apos;) btn.onclick = function()&#123; console.log(&apos;DOM0&apos;) &#125; //DOM0事件监听 ////////// ////////// btn.addEventListener(&apos;click&apos;,function()&#123; console.log(&apos;DOM2&apos;) &#125;) //DOM2时间监听 &lt;/script&gt;&lt;/html&gt; DOM0级事件处理方式： 通过javascript制定事件处理程序的传统方式。就是将一个函数赋值给一个事件处理属性DOM2级事件处理方式: DOM2级事件处理方式指定了添加事件处理程序和删除事件处理程序的方法 attachEvent与addEventListener的区别？target.attachEvent(type,handler)attachEvent接收两个参数参数一：是监听的事件类型，时间前要加“on”，比如“click”事件要写作“onclick”参数二：是回调函数，触发事件后执行，注意该回调函数是没有参数的target.addEventListener(type, handler,boolean);都接受三个参数：参数一：事件类型参数二：事件处理方法参数三：布尔参数，如果是true表示在捕获阶段调用事件处理程序，如果是false，则是在事件冒泡阶段处理（默认false） 解释IE事件冒泡和DOM2事件传播机制？IE的事件冒泡：事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的元素 DOM事件流：DOM2级事件规定事件流包括三个阶段，事件捕获阶段，处于目标阶段，事件冒泡阶段，首先发生的是事件捕获，为截取事件提供机会，然后是实际目标接收事件，最后是冒泡阶段 如何阻止事件冒泡？ 如何阻止默认事件？event.stopPropagation(); //阻止事件捕获、冒泡 event.preventDefault(); //阻止事件默认行为 //////////// event.cancelBubble = true; // 阻止冒泡的兼容写法，值为false为允许冒泡 event.returnValue = true; // 阻止默认事件的兼容写法，值为flase为允许默认事件 编写代码，实现以下功能： 当点击每一个元素li时控制台展示该元素的文本内容。不考虑兼容 1234567891011121314&lt;ul class=&quot;ct&quot;&gt; &lt;li&gt;这里是&lt;/li&gt; &lt;li&gt;我的博客&lt;/li&gt; &lt;li&gt;欢迎访问&lt;/li&gt;&lt;/ul&gt;&lt;script&gt;var liNode = document.querySelectorAll(&apos;.ct li&apos;)liNode.forEach(function(node) &#123; node.addEventListener(&apos;click&apos;,function()&#123; console.log(this.innerText) &#125;)&#125;)&lt;/script&gt; 编写代码，实现以下功能： 当点击按钮开头添加时在&lt;li&gt;这里是&lt;/li&gt;元素前添加一个新元素，内容为用户输入的非空字符串；当点击结尾添加时在最后一个 li 元素后添加用户输入的非空字符串. 当点击每一个元素li时控制台展示该元素的文本内容。 1234567891011121314151617181920212223242526272829303132333435363738&lt;ul class=&quot;ct&quot;&gt; &lt;li&gt;这里是&lt;/li&gt; &lt;li&gt;我的博客&lt;/li&gt; &lt;li&gt;欢迎访问&lt;/li&gt;&lt;/ul&gt;&lt;input class=&quot;ipt-add-content&quot; placeholder=&quot;添加内容&quot; /&gt;&lt;button id=&quot;btn-add-start&quot;&gt;开头添加&lt;/button&gt;&lt;button id=&quot;btn-add-end&quot;&gt;结尾添加&lt;/button&gt;&lt;script&gt; var ctNode = document.querySelector(&apos;.ct&apos;) var iptCt = document.querySelector(&apos;.ipt-add-content&apos;) var addStart = document.querySelector(&apos;#btn-add-start&apos;) var addEnd = document.querySelector(&apos;#btn-add-end&apos;) ctNode.addEventListener(&apos;click&apos;, function (e) &#123; if (e.target.tagName === &apos;LI&apos;) &#123; console.log(e.target.innerText) &#125; &#125;) addStart.addEventListener(&apos;click&apos;, function () &#123; if (/\S/.test(iptCt.value)) &#123; var liNode = document.createElement(&apos;li&apos;) liNode.innerText = iptCt.value console.log(ctNode) console.log(ctNode[0]) ctNode.insertBefore(liNode, ctNode.firstChild) //开头添加 &#125; &#125;) addEnd.addEventListener(&apos;click&apos;, function () &#123; if (/\S/.test(iptCt.value)) &#123; var liNode = document.createElement(&apos;li&apos;) liNode.innerText = iptCt.value ctNode.appendChild(liNode) //末尾添加 &#125; &#125;)&lt;/script&gt;]]></content>
      <tags>
        <tag>javaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS 正则表达式]]></title>
    <url>%2F2017%2F08%2F23%2FJS%E6%AD%A3%E5%88%99%2F</url>
    <content type="text"><![CDATA[\d，\w,\s,[a-zA-Z0-9],\b,.,*,+,?,x{3},^,$分别是什么?、\d用于匹配数字\w 匹配单词字符，字母、数字下划线\s 匹配空白字符[a-zA-Z0-9] 匹配数字、大小写字母\b 匹配单词边界. 匹配除了回车符和换行符之外的所有字符* 表示所匹配的内容需要出现0次或者无数次（任意次）+ 表示所匹配的内容需要1次或者无数次（至少出现一次）? 表示所匹配的内容需要0次或者一次（最多出现一次）x{3} 当x出现三次时匹配^ 匹配以xxx开头时使用$ 匹配以xxx结尾时使用 写一个函数trim(str)，去除字符串两边的空白字符123456var str = &quot; hello jirengu &quot;function trim(str)&#123;return str.replace(/^\s+|\s+$/,&quot; &quot;);&#125;var newStr = trim(str);console.log(newStr); 写一个函数isEmail(str)，判断用户输入的是不是邮箱12345function isEmail(str)&#123;//用户名中可包含下划线，一般邮箱名中只包含字母与数字，考虑多级域名 var regExp = /^\w+@[a-zA-Z0-9]+(\.[a-zA-Z]+)+$/; return regExp.test(str);&#125; 写一个函数isPhoneNum(str)，判断用户输入的是不是手机号1234function isPhoneNum(str)&#123; var reg = /^(+86)?1\d&#123;10&#125;$/; return reg.test(str);&#125; 写一个函数isValidUsername(str)，判断用户输入的是不是合法的用户名（长度6-20个字符，只能包括字母、数字、下划线）1234function isValidUsername(str)&#123; var regExp = /^\w&#123;6,20&#125;$/; return regExp.test(str);&#125; 写一个函数isValidPassword(str), 判断用户输入的是不是合法密码（长度6-20个字符，只包括大写字母、小写字母、数字、下划线，且至少至少包括两种）1234567891011function isValidPassword(str)&#123; var reg = /(^[a-z]+$)|(^[A-Z]+$)|(^_+$)|(^\d+$)/g if(reg.test(str))&#123; return false + &apos;字母、数字、下划线至少包括两种&apos; &#125;else if(str.length &lt; 6 || str.length &gt; 20)&#123; return false + &apos;长度6-20个字符&apos; &#125;else if (/\W/g.test(str)) &#123; return false + &apos;只包括大写字母、小写字母、数字、下划线&apos; &#125; return true&#125; 写一个正则表达式，得到如下字符串里所有的颜色123var re = /#[0-9a-fA-F]&#123;6&#125;/gvar subj = &quot;color: #121212; background-color: #AA00ef; width: 12px; bad-colors: f#fddee &quot;console.log( subj.match(re) ) // [&apos;#121212&apos;, &apos;#AA00ef&apos;] 下面代码输出什么? 为什么? 改写代码，让其输出[“”majiangbo””, “”world””]123var str = &apos;hello &quot;majiangbo&quot; , hello &quot;world&quot;&apos;;var pat = /&quot;.*?&quot;/gstr.match(pat);]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS DOM]]></title>
    <url>%2F2017%2F08%2F23%2FjavaScript%E4%B9%8BDOM%2F</url>
    <content type="text"><![CDATA[dom对象的innerText和innerHTML有什么区别？innerText返回的是元素所包含的文本内容，多层次时会按元素由浅入深的顺序将文本内容拼接起来innerHTML返回的是整个元素的结构 elem.children和elem.childNodes的区别？elem.children : 它返回指定元素的子元素集合，它只返回HTML节点elem.childNodes : 它返回指定元素的子元素集合，包括HTML节点，所有属性，文本1234&lt;body&gt; &lt;h1&gt;Hello&lt;/h1&gt; &lt;p&gt;abcabc&lt;/p&gt;&lt;/body 查询元素有几种常见的方法？ES5的元素选择方法是什么?gatElementById():匹配指定ID属性的元素节点。如果没有发现匹配的节点，则返回nullgetElementsByName()：选择拥有name属性的HTML元素，比如form、img、frame、embed和object，返回一个NodeList格式的对象，不会实时反映元素的变化。getElementsByClassName():匹配一个类似数组的对象，包括了所有class名字符合指定条件的元素（搜索范围包括本身），元素的变化实时反映在返回结果中。这个方法不仅可以在document对象上调用，也可以在任何元素节点上调用getElementsByTagName():返回所有指定标签的元素（搜索范围包括本身）。返回值是一个HTMLCollection对象，也就是说，搜索结果是一个动态集合，任何元素的变化都会实时反映在返回的集合中。这个方法不仅可以在document对象上调用，也可以在任何元素节点上调用。 ES5中元素选择方法： querySelector()：querySelector方法返回匹配指定的CSS选择器的元素节点。如果有多个节点满足匹配条件，则返回第一个匹配的节点。如果没有发现匹配的节点，则返回null。 querySelectorAll()：返回匹配指定的CSS选择器的所有节点，返回的是NodeList类型的对象。NodeList对象不是动态集合，所以元素节点的变化无法实时反映在返回结果中。 如何创建一个元素？如何给元素设置属性？如何删除属性12345var elem = document.createElement(&apos;div&apos;) //创建元素elem.setAttribute(&apos;class&apos;,&apos;box&apos;) //设置属性 console.log(elem) // &lt;div class = &quot;box&quot;&gt;&lt;/div&gt;elem.removeAttribute(&apos;class&apos;) //删除属性console.log(elem) // &lt;div&gt;&lt;/div&gt; 如何给页面元素添加子元素？如何删除页面元素下的子元素appendChild() : 在元素的末尾添加子元素insertBefore() :在元素之前添加元素replaceChild() :在元素中替换某个元素 element.classList有哪些方法？如何判断一个元素的 class 列表中是包含某个 class？如何添加一个class？如何删除一个class?classList.add(&quot;calss1,class2&quot;)：为元素添加class,添加多个以逗号分隔calssList.contains(&quot;clsss1&quot;) ： 判断元素是否包含此class,return true or falseclassList.item(index) ： 获取元素class，通过下标classList.remove(&quot;class1,class2&quot;) ： 移除元素的classclssList.toggle(&quot;calss,ture|false&quot;) ： 切换元素class，第一个参数为要移除的类名，返回flase，如果没有此class，则会在元素中添加类名，并返回ture。第二个参数为布尔值，用于强制添加或者删除（无论此类名是否存在），值为ture，则为强制添加，若为flase，则为强制删除1234var newDiv = document.createElement(&quot;div&quot;)newDiv.classList.add(&quot;class1&quot;,&quot;class2&quot;) //添加classnewDiv.classList.contains(&quot;class1&quot;) // 判断元素是否包含class1，返回turenewDiv.classList.remove(&quot;class2&quot;) // 移除class2 如何选中如下代码所有的li元素？ 如何选中btn元素？12345678910111213&lt;div class=&quot;mod-tabs&quot;&gt; &lt;ul&gt; &lt;li&gt;list1&lt;/li&gt; &lt;li&gt;list2&lt;/li&gt; &lt;li&gt;list3&lt;/li&gt; &lt;/ul&gt; &lt;button class=&quot;btn&quot;&gt;点我&lt;/button&gt; &lt;/div&gt; &lt;script&gt; // document.getElementsByTagName(&quot;li&quot;) document.querySelectorAll(&quot;li&quot;) document.querySelector(&quot;.btn&quot;) &lt;/script&gt;]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS随机数 日期函数 数组方法]]></title>
    <url>%2F2017%2F08%2F13%2FJS%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%864%2F</url>
    <content type="text"><![CDATA[写一个函数，返回从min到max之间的 随机整数，包括min不包括max123function random(min,max) &#123; return min + Math.floor(Math.random() * (max - min))&#125; 写一个函数，返回从min都max之间的 随机整数，包括min包括max123function random(min,max) &#123; return min + Math.floor(Math.random() * (max - min + 1))&#125; 写一个函数，生成一个长度为 n 的随机字符串，字符串字符的取值范围包括0到9，a到 z，A到Z123456789101112function random(min,max) &#123; return min + Math.floor(Math.random() * (max - min))&#125; function getRandStr(len) &#123; var dict =&apos;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&apos; var str = &apos;&apos; for(var i = 0; i &lt; len; i++)&#123; str += dict[random(0,62)] &#125; return str&#125;var str = getRandStr(10) //&quot;3xo2nOv9HH&quot; 写一个函数，生成一个随机 IP 地址，一个合法的 IP 地址为 0.0.0.0~255.255.255.25512345678910function random(min,max) &#123; return min + Math.floor(Math.random() * (max - min))&#125; function getRandIp() &#123; var arr = []; for(var i = 0; i &lt; 4; i++)&#123; arr.push(random(0,256)); &#125; return arr.join(&apos;.&apos;);&#125; 写一个函数，生成一个随机颜色字符串，合法的颜色为#000000~ #ffffff1234567891011function random(min,max) &#123; return min + Math.floor(Math.random() * (max - min))&#125; function getRandColor() &#123; var dict = &quot;0123456789abcdef&quot; var color = &quot;&quot; for(var i = 0; i &lt; 6;i++)&#123; color += dict[random(0,16)] &#125; return &apos;#&apos; + color&#125; 数组方法里push、pop、shift、unshift、join、splice分别是什么作用？用 splice函数分别实现push、pop、shift、unshift方法 push：栈方法，在数组末尾增加一项 pop： 栈方法，删掉数组末尾一项 shift：队列方法，删掉数组开头第一项 unshift：队列方法，在数组起始位置增加一项 join：使用参数将数组元素连接起来成一个字符串，不会修改原数组内容 splice：可以一次性解决数组的增删、替换的方法 splice方法有三个参数 开始索引 删除元素的个数 插入的新元素（可以插入多个） 12345678910111213var arr = [1,2,3,4]arr.splice(arr.length,0,5) // 等同于 arr.push(5)console.log(arr) // [1,2,3,4,5]//用splice实现push方法arr.splice(arr.length-1,1) // 等同于 arr.pop()console.log(arr) // [1,2.3,4]//用splice实现pop方法arr.splice(0,1) // 等同于 arr.shift()console.log(arr) // [2,3,4]//用splice实现shift方法 arr.splice(0,0,1) // 等同于 arr.unshift(1)console.log(arr) // [1,2,3,4]//用splice实现unshift方法 写一个函数，操作数组，数组中的每一项变为原来的平方，在原数组上操作1234567function squareArr(arr)&#123; for(var i = 0; i &lt; arr.length; i++)&#123; arr[i] *= arr[i] &#125;&#125;squareArr(arr)console.log(arr) // [4, 16, 36] 写一个函数，操作数组，返回一个新数组，新数组中只包含正数，原数组不变123456789function filterPositive(arr)&#123; return arr.filter(function(e)&#123; return (typeof e === &quot;number&quot; &amp; e &gt; 0) &#125;)&#125; var arr = [3, -1, 2, &apos;饥人谷&apos;, true]var newArr = filterPositive(arr);console.log(arr); // [3, -1, 2, &apos;饥人谷&apos;, true]console.log(newArr); // [3,2] 写一个函数getChIntv，获取从当前时间到指定日期的间隔时间123456789101112131415function getChIntv(str) &#123; var targetDate = new Date(str) var curDate = new Date() var totalTime = Math.abs(targetDate - curDate) var secondTotal = Math.floor(totalTime / 1000) var second = secondTotal % 60 var minuteTotal = Math.floor(secondTotal / 60) var minute = minuteTotal % 60 var hourTotal = Math.floor(minuteTotal / 60) var hour = hourTotal % 24 var dayTotal = Math.floor(hourTotal / 24) return &apos;时间差为：&apos;+dayTotal+&apos;天&apos;+hour+&apos;小时&apos;+minute+&apos;分钟&apos;+second+&apos;秒&apos;&#125; 把hh-mm-dd格式数字日期改成中文日期123456789101112131415161718192021222324252627282930313233343536373839404142434445function getChsDate(str)&#123; var dict = &apos;零一二三四五六七八九&apos; var arr = str.split(&apos;-&apos;); var resultStr = &apos;&apos;; var yearStr = &apos;&apos;,monthStr = &apos;&apos;,dayStr =&apos;&apos;; function resultMonth()&#123; //月份转换函数 if(insideArr[0] === &apos;0&apos;)&#123; monthStr = dict[insideArr[1]]; &#125;else if(insideArr[1] === &apos;0&apos;)&#123; monthStr = &apos;十&apos;; &#125;else&#123; monthStr = &apos;十&apos; + dict[insideArr[1]]; &#125; return monthStr; &#125; function resultDay()&#123; //日期转换函数 if(insideArr[0] === &apos;1&apos;)&#123; dayStr = &apos;十&apos; + dict[insideArr[1]]; &#125;else if(insideArr[0] === &apos;2&apos;)&#123; dayStr = &apos;二十&apos; + dict[insideArr[1]]; &#125;else if(insideArr[0] === &apos;3&apos;)&#123; dayStr = &apos;三十&apos; + dict[insideArr[1]]; &#125;else&#123; dayStr = dict[insideArr[1]]; &#125; if(insideArr[1] === &apos;0&apos;)&#123; dayStr = dayStr.slice(0,1); &#125; return dayStr; &#125; for(var i = 0;i &lt; arr.length;i++)&#123; var insideArr = arr[i].split(&apos;&apos;); for(j = 0;j &lt; insideArr.length;j++)&#123; if(i === 0)&#123; yearStr += dict[insideArr[j]]; &#125;else if (i === 1)&#123; resultMonth(); &#125;else&#123; resultDay(); &#125; &#125;&#125; return resultStr = yearStr +&apos;年&apos;+monthStr+&apos;月&apos;+dayStr+&apos;日&apos;;&#125;getChsDate(&apos;2015-1-8&apos;); //二零一五年一月八日 写一个函数，参数为时间对象毫秒数的字符串格式，返回值为字符串。假设参数为时间对象毫秒数t，根据t的时间分别返回如下字符串:刚刚（ t 距当前时间不到1分钟时间间隔）3分钟前 (t距当前时间大于等于1分钟，小于1小时)8小时前 (t 距离当前时间大于等于1小时，小于24小时)3天前 (t 距离当前时间大于等于24小时，小于30天)2个月前 (t 距离当前时间大于等于30天小于12个月)8年前 (t 距离当前时间大于等于12个月)1234567891011121314151617function friendlyDate(time)&#123; time = parseInt(time) var timeGap = new Date() - new Date(time); if(timeGap/1000 &lt; 60)&#123; return &apos;刚刚&apos; &#125;else if(timeGap/1000 &gt;= 60 &amp;&amp; timeGap/1000 &lt; 3600)&#123; return &apos;3分钟前&apos; &#125;else if(timeGap/60000 &gt;= 60 &amp;&amp; timeGap/60000 &lt; 1440)&#123; return &apos;8小时前&apos; &#125;else if(timeGap/3600000 &gt;= 24 &amp;&amp; timeGap/3600000 &lt; 720)&#123; return &apos;三天前&apos; &#125;else if(timeGap/86400000 &gt;= 30 &amp;&amp; timeGap/86400000 &lt; 360)&#123; return &apos;2个月前&apos; &#125;else&#123; return &apos;8年前&apos; &#125;&#125;]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数组 函数 JSON]]></title>
    <url>%2F2017%2F07%2F30%2FJS%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%863%2F</url>
    <content type="text"><![CDATA[对于 HTTP 协议而言，HTML、CSS、JS、JSON 的本质都是什么？对于HTTP来讲，HTML、CSS、JS、JSON本质上都只是一系列字符串而已，它们遵循自身的语法规范，它们用不同的Content-Type来告诉浏览器如何去解析它们当Content-Type=text/html时，浏览器会将字符串按照HTML语法来解析当Content-Type=text/css时，浏览器会将字符串按照CSS语法来解析当Content-Type=text/javascript时，浏览器会将字符串按照JS语法来解析 使用数组拼接出如下字符串 ，其中styles数组里的个数不定12345678910111213141516171819var prod = &#123; name: &apos;女装&apos;, styles: [&apos;短款&apos;, &apos;冬季&apos;, &apos;春装&apos;]&#125;;function getTplStr(data)&#123;var arr = [];var str;arr.push(&apos;&lt;dl class=&quot;product&quot;&gt;&apos;);arr.push(&apos;&lt;dt&gt;&apos;+data[&apos;name&apos;]+&apos;&lt;dt&gt;&apos;);for(var i in data[&apos;styles&apos;])&#123; arr.push(&apos;&lt;dd&gt;&apos;+data[&apos;styles&apos;][i]+&apos;&lt;dd&gt;&apos;) &#125; arr.push(&apos;&lt;dl&gt;&apos;); return str = arr.join(&apos;&apos;);&#125;;var result = getTplStr(prod); //result为下面的字符串console.log(result);&lt;dl class=&quot;product&quot;&gt;&lt;dt&gt;女装&lt;/dt&gt;&lt;dd&gt;短款&lt;/dd&lt;dd&gt;冬季&lt;/dd&gt;&lt;dd&gt;春装&lt;/dd&gt;&lt;/dl&gt; 写一个函数，统计字符串里出现出现频率最多的字符123456789101112131415161718192021var str1 = &quot;Welcome to jirengu&quot;function sta(str) &#123; var dict = &#123;&#125;; for (var i = 0; i &lt; str.length; i++) &#123; if (dict[str.charAt(i)]) &#123; dict[str.charAt(i)]++; &#125; else &#123; dict[str.charAt(i)] = 1; &#125; &#125; var word = &quot; &quot;; var value = 0; for (var key in dict) &#123; if (dict[key] &gt; value) &#123; word = key; value = dict[key]; &#125; &#125; console.log(&quot;出现最多的字符：&quot; + word, &quot;出现次数:&quot; + value);&#125;sta(str1); 写一个camelize函数，把my-short-string形式的字符串转化成myShortString形式的字符串1234567891011121314151617181920 function camelize(str) &#123; var arr = str.split(&apos;-&apos;); for (var i = 1; i &lt; arr.length; i++) &#123; arr[i] = arr[i].replace(arr[i][0],arr[i][0].toUpperCase()); &#125; return arr.join(&apos;&apos;); &#125; camelize(&quot;background-color&quot;) //&apos;backgroundColor&apos; camelize(&quot;list-style-image&quot;) //&apos;listStyleImage&apos;------####写一个函数truncate(str, maxlength), 如果str的长度大于maxlength，会把str截断到maxlength长，并加上...， function truncate(str, maxlength) &#123; if (str.length &gt; maxlength) &#123; return str.substr(0, maxlength) + &apos;...&apos;; &#125; else &#123; return str; &#125; &#125; truncate(&quot;hello, this is hunger valley,&quot;, 10);// &quot;hello, thi...&quot; truncate(&quot;hello world&quot;, 20); // &quot;hello world&quot; 什么是 JSON格式数据？JSON格式数据如何表示对象？window.JSON 是什么？11、如何把JSON 格式的字符串转换为 JS 对象？如何把 JS对象转换为 JSON 格式的字符串?JSON语法规定： 数据在名称/值对中 数据由逗号分隔 花括号保存对象 方括号保存数组 符合JSON语法的数据即为JSON格式数据 JSON对象是一个无序的“名称/值对”集合。一个对象以“{”（左括号）开始，“}”（右括号）结束。每个“名称”后跟一个“:”（冒号）；“名称/值对”之间使用“,”（逗号）分隔。123456var json1 = &#123;&quot;name&quot;: &quot;Byron&quot;, &quot;age&quot;: &quot;24&quot;&#125;var json2 = [ &#123;&quot;name&quot;: &quot;Byron&quot;, &quot;age&quot;: &quot;24&quot;&#125;, &#123;&quot;name&quot;: &quot;Byron2&quot;, &quot;age&quot;: &quot;25&quot;&#125;]]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS数组]]></title>
    <url>%2F2017%2F07%2F19%2FJS%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%862%2F</url>
    <content type="text"><![CDATA[引用类型有哪些？非引用类型有哪些2.如下代码输出什么？为什么基本类型是指保存在栈内存中的简单数据，有数值、 布尔值、 null、undefined引用类型是指保存在堆内存中的对象，变量中实际保存的只是指针12345var obj1 = &#123;a:1, b:2&#125;; var obj2 = &#123;a:1, b:2&#125;;console.log(obj1 == obj2); //falseconsole.log(obj1 = obj2); //｛a:1 b:2｝console.log(obj1 == obj2); //ture 第一次flase原因是obj1和obj2是两个独立的对象，他们存储内容的地址不同，所以不相等，将obj2赋值给obj1时，所赋的值为｛a:1 b:2｝，赋值之后，两者值相等，内存也相同，所以ture 如下代码输出什么? 为什么12345678910111213141516171819var a = 1var b = 2var c = &#123; name: &apos;饥人谷&apos;, age: 2 &#125;var d = [a, b, c]var aa = avar bb = bvar cc = cvar dd = da = 11b = 22c.name = &apos;hello&apos;d[2][&apos;age&apos;] = 3console.log(aa) // 1console.log(bb) // 2console.log(cc) // &#123;name:&apos;hello&apos; , age:3&#125;console.log(dd) // [1,2,object&#123;name:&quot;hello&quot;,age:3&#125;] aa和bb的值是由a和b赋值得来的，因为是数字，属于基本类型，所以aa,bb值分别为1和2，之后改变a,b的值不影响aa和bb，而赋值给cc,dd值的c与d的值，属于引用类型，其赋予cc,dd的只是一个指向其数据的地址，所以在之后改变c和d中的某个值之后，cc,dd中对应的值也会发生改变 如下代码输出什么? 为什么123456789101112131415var a = 1var c = &#123; name: &apos;jirengu&apos;, age: 2 &#125;function f1(n)&#123; ++n&#125;function f2(obj)&#123; ++obj.age&#125;f1(a) f2(c) f1(c.age) console.log(a) // 1console.log(c) //&#123;name:&apos;jirengu&apos;,age:3&#125; 函数f1中是将n自加，所以f1(a)就相当于var n = a; ++n；这样的函数并不能改变变量a的值，f1(c.age)同理，而f2(c)是将对象中的age值自加1，所以输出值如上所示 过滤如下数组，只保留正数，直接在原数组上操作1234567891011var arr = [3,1,0,-1,-3,2,-5]function filter(arr)&#123;for(var i = 0; i &lt; arr.length; i++)&#123; if(arr[i] &lt;= 0)&#123; arr.splice(i,1) filter(arr) &#125; &#125;&#125;filter(arr)console.log(arr) // [3,1,2] 过滤如下数组，只保留正数，原数组不变，生成新数组1234567var arr = [3,1,0,-1,-3,2,-5]function Newarr(element)&#123; return element &gt; 0;&#125;var arr2 =arr.filter(Newarr);console.log(arr2) // [3,1,2]console.log(arr) // [3,1,0,-1,-2,2,-5] 写一个深拷贝函数，用两种方式实现 function copy(obj){ var newObj = {}; for(var key in obj){ //遍历对象中的内容 if(typeof obj[key] === &quot;string&quot; || typeof obj[key] === &quot;number&quot; || typeof obj[key] === &quot;boolean&quot; || typeof obj[key] === undefined || typeof obj[key] === null ){ newObj[key] = obj[key]; //基本类型直接复制 } else { newObj[key] = copy(obj[key]); //引用类型递归复制 } } return newObj; } //用递归法深拷贝 - function copy2(obj) { var newObj = {} newObj = JSON.parse( JSON.stringify(obj) ) //将对象转化为JSON字符串，然后将JSON字符串解析成对象完成深拷贝 return newObj }]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS函数]]></title>
    <url>%2F2017%2F07%2F19%2FJS%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%861%2F</url>
    <content type="text"><![CDATA[函数声明和函数表达式有什么区别构造函数常用的两种方法：函数声明和函数表达式123456789101112131415161718 //函数声明 function sum(a, b) &#123; return a + b; &#125; alert(sum(1, 2)); //函数表达式 var s = function sum(a, b) &#123; return a + b; &#125; alert(s(1, 2)); /*///////////////////////////////*/ var s = function(a, b) &#123; return a + b; &#125; alert(s(1, 2)); //以上两种都可以 这二者区别是： 可以看到函数声明必须有函数名，而函数表达式中的函数名可以忽略 由于JavaScript解析器对这两种定义方式读取的顺序不同所以用函数声明定义的函数,函数可以在函数声明之前调用,而用函数表达式定义的函数只能在声明之后调用。 什么是变量的声明前置？什么是函数的声明前置变量声明前置是将变量的声明提到当前作用域的开头，比如：12345678console.log(a); //undefinedvar a = 1;console.log(a); // 1// 上面的代码在函数解析的过程是这样的var a;console.log(a); // undefineda = 1 ;console.log(a); // 1 变量声明前置只是将其提前声明，对于它的赋值则还在原来的位置。 函数的声明前置，举个栗子：1234 fun1(); // 123 function fun1()&#123;console.log(123); &#125; 函数声明前置是将函数声明提前到当前作用域开头，注意函数声明前置比变量声明前置优先级更高，可以在当前作用域下任何地方调配此函数，区别于函数表达式所必需遵守的先后顺序。 arguments 是什么arguments是一个类似数组的对象, 对应于传递给函数的参数。arguments 对象仅在函数内部有效，在函数外部调用 arguments 对象会出现一个错误。可以使用arguments对象在函数中引用函数的参数。此对象包含传递给函数的每个参数的条目,比如：123456function Resume(name,age,sex)&#123;console.log(arguments[0]); // 等效于console.log(name);console.log(arguments[1]); // console.log(age);console.log(arguments[2]); // console.log(sex);&#125;Resume(&apos;XiaoMing&apos;,21,&apos;male&apos;); 函数的”重载”怎样实现函数重载是指：形参不同的多个同名函数根据处理数据的不同而返回不同的结果。函数重载主要运用于c++,java等强类型语言中，因为JavaScript是若类型语言，构建同名函数会把之前的覆盖掉，因此在JS中没用重载，但是可以运用一些技巧达到重载的效果。比如：1234function fun1(obj) &#123; alert(1) &#125;function fun1(obj, obj1, obj2) &#123; alert(3) &#125;function fun1(obj2,obj3) &#123;alert(2) &#125;fun1(); 这样的代码在JS中只会弹出“2”，因为后面的函数会覆盖掉前面的同名函数，那要怎么样才能打到想要的效果呢，这就需要添加判定条件了1234567891011121314151617181920function fun1(obj) &#123; alert(1) &#125;function fun3(obj, obj1, obj2) &#123; alert(3) &#125;function fun2(obj, obj1) &#123; alert(2) &#125; function funAll(obj, obj1, obj2, obj3) &#123; if ( arguments.length == 1) &#123; fun1(obj); &#125; else if ( arguments.length == 2) &#123; fun2(obj, obj1); &#125; else if ( arguments.length == 3) &#123; fun3(obj, obj1, obj2); &#125;&#125;funAll(&quot;&quot;);funAll(&quot;&quot;, &quot;&quot;);funAll(&quot;&quot;, &quot;&quot;,&quot;&quot;); 立即执行函数表达式是什么？有什么作用立即执行函数模式是一种语法，可以让你的函数在定义后立即被执行,作用是隔离作用域，独立起来不影响全局123(function () &#123; alert(&apos;hello world&apos;);&#125;)() 求n!，用递归来实现123456789 function factor(n)&#123;if(n &lt; 0)&#123; return false;&#125;else if(n &lt;= 1)&#123; return 1;&#125;else&#123; return n * factor(n-1);&#125; &#125; 写一个函数，返回参数的平方和？1234567891011function sumOfSquares(a,b,c)&#123; var sum = 0; for (var i = 0; i &lt; arguments.length; i++) &#123; sum += (arguments[i]) * (arguments[i]); &#125; return sum;&#125; var result = sumOfSquares(2,3,4) var result2 = sumOfSquares(1,3) console.log(result) //29 console.log(result2) //10 如下代码的输出？为什么123 console.log(a); //undefined 变量a声明前置，但是还未赋值var a = 1;console.log(b); //报错，因为没有声明变量b 如下代码的输出？为什么12345678 sayName(&apos;world&apos;); // hello world 函数声明前置，可以随意调用 sayAge(10); // 报错，因为此函数必须必须在其函数表达式之后调用 function sayName(name)&#123; console.log(&apos;hello &apos;, name);&#125;var sayAge = function(age)&#123; console.log(age);&#125;;]]></content>
      <tags>
        <tag>javaScript</tag>
        <tag>函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP相关]]></title>
    <url>%2F2017%2F05%2F08%2FHTML%E6%A6%82%E8%BF%B0%2F</url>
    <content type="text"><![CDATA[HTML,XML与XHTML HTML（Hypertext Marked Language）超文本标记语言，它的简易性、可拓展性使它成为目前网络上应用最为广泛的语言，也是构成网页文档的主要语言。但同时也造成了了一些弊端，如语法不严谨，结构松散等。 XML（Extensible Markup Language）可拓展标记语言，是一种用于标记电子文件使其具有结构性的标记语言，它被设计用来传输和存储数据，其重点是在于数据的内容，是独立于软件和硬件的信息传输工具。它对于编码规范的要求更为严格。 XHTML(Extensible Hypertext Markup Language)可拓展超文本标记语言，表现方式与HTML类似，但比HTML在语法上要更加严格，XHTML是一个基于XML的标记语言，看起来与HTML有些相象，只有一些小的但重要的区别，XHTML就是一个扮演着类似HTML的角色的可扩展标记语言（XML），所以，本质上说，XHTML是一个过渡技术，结合了部分XML的强大功能及大多数HTML的简单特性。 HTML的语义化 使内容结构化，选择使用合适的标签，使代码更加规范，方便开发者阅读，利于浏览器爬虫爬取内容，利于SEO优化，方便其他设备解析，更利于后期开发及维护…等等优点。 内容与样式分离Html用于构建网页结构，展示网页内容，css则用于为网页的内容设置与更改样式，在网页开发中，将Html和css分离的做法称之为结构样式分离，如果直接将样式写在html标签中，会使整个html文档很乱，可读性变差，不利于维护。 将样式与结构分离有很多的好处： 利用CSS中的重用、组合、继承等特性减少样式的代码量，样式结构上非常清晰 页面视觉有变动只需要修改相应的CSS文件，不用或者基本上不用改动html文档中的标签结构 适合产品级、模块化的开发 常见的meta标签 声明编码&lt;meta charset=UTF-8&gt; 关键字&lt;meta http-equiv=&quot;keywords&quot; content=&quot;your tags&quot;&gt; 页面描述&lt;meta name=&quot;description&quot; content=&quot;150 words&quot; /&gt; 页面重定向和刷新&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=&quot; /&gt; 定义页面作者&lt;meta name=&quot;author&quot; content=&quot;author,email address&quot;&gt; 文档声明的作用,严格模式和混杂模式指什么&lt;!doctype html&gt;是HTML5中的文档声明，它的作用是使浏览器获知文档类型。 在HTML4.01中，&lt;!DOCTYPE&gt; 声明引用 DTD，因为 HTML 4.01 基于 SGML。DTD 规定了标记语言的规则，这样浏览器才能正确地呈现内容。DTD一般分为两种模式。 严格模式：又称标准模式，是指浏览器按照 W3C 标准解析代码。 混杂模式：又称兼容模式，是指浏览器用自己的方式解析代码。 浏览器乱码的原因及解决方法浏览器有几种不同的编码规范，如我们常用的UTF-8,GB2312等。我们如果在开发过程中，我们所编写并保存的Html文件的所使用的编码规范与浏览器打开使采用的编码规范不一致，就会出现乱码现象，因此，我们在编写Html时，一定要注意在文档头部添加&lt;meta charset=&quot;utf-8&quot;&gt;声明，这样浏览器就会使用你所声明的编码规范来打开你的Html文档。避免发生乱码现象。 常见的浏览器及其内核 Chrome 内核为WebKit IE浏览器 内核为Trident Opera 内核为WebKit(注：2013年2月13日，Opera宣布放弃自家Presto内核而改为使用WebKit内核) Firefox 内核为Gecko 常见的标签以及使用的场景 &lt;head&gt;&lt;/head&gt;head标签是页面的“头部”， 一般来说，只有6个标签能放在标签内：、、、、、 &lt;body&gt;&lt;/body&gt;body标签是页面的身体，页面中的内容都包含于此 &lt;h1&gt;&lt;/h1&gt;~&lt;h6&gt;&lt;/h6&gt;不同级别/重要程度的标题 &lt;p&gt;&lt;/p&gt;表示文本段落 &lt;div&gt;&lt;/div&gt;无属性块标签，用于网页划分区域 无序列表 12345678 &lt;ul&gt; &lt;li&gt;xx&lt;/li&gt; &lt;li&gt;xx&lt;/li&gt; &lt;/ul&gt;``` * 有序列表 &lt;li&gt;xx&lt;/li&gt; &lt;li&gt;xx&lt;/li&gt;]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[form表单简介]]></title>
    <url>%2F2017%2F05%2F06%2Fform%E8%A1%A8%E5%8D%95%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[作用HTML 中表单用于接收不同类型的用户输入，用户提交表单时向服务器传输数据，从而实现用户与Web服务器的交互。 工作机制HTML中，表单内容写在&lt;form&gt;&lt;/form&gt;标签内，当用户在表单中输入内容并提交后，浏览器会将表单中的数据进行打包，发送给服务器，服务器接收后解析出表单内容并处理。 form标签form标签的使用方法如下 123&lt;form name=&quot;&quot; method=&quot;&quot; action=&quot;&quot; enctype=&quot;&quot;&gt; 表单项，文字，图片等&lt;/form&gt; name表示表单的名称 action用来指定接收表单数据的服务器页面 methos是指定表单的传输方式，post或get enctype指定传递数据的编码方式 表单中的各式内容，则是在form标签内添加其他标签的方式完成，下面介绍一些常用的标签。 表单中常用的标签 input标签，用于向表单输入内容，常见的格式有： type=”text” 文本输入框 type=”password” 密码输入框 示例 12&lt;label for=&quot;password&quot;&gt;密码&lt;/label&gt;&lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot; placeholder=&quot;请输入密码&quot;&gt; type=”radio” 单选按钮 示例 12&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;male&quot;&gt;&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;female&quot;&gt; type=”checkbox” 复选/多选按钮示例 123&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; id=&quot;basketball&quot;&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; id=&quot;travel&quot;&gt;&lt;input type=&quot;checkbox&quot; name=&quot;hobby&quot; id=&quot;pet&quot;&gt; type=”hidden” 隐藏域 示例 1&lt;input type=&quot;hidden&quot; name=&quot;csrf&quot; id=&quot;xxxxxxxxxxx&quot;&gt; &lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt;重置按钮 &lt;input type=&quot;button&quot; value=&quot;按钮&quot;&gt;普通按钮 &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;提交按钮 ttextarea： 长文本输入 示例 12&lt;textarea name=&quot;article&quot; id=&quot;dialog&quot; cols=&quot;30&quot;rows=&quot;10&quot; placeholder=&quot;ddd&quot;&gt;&lt;/textarea&gt; select：下拉选择列表，闭合标签，用&lt;option&gt;&lt;/option&gt;增加选项。 示例 12&lt;label for=&quot;password&quot;&gt;密码&lt;/label&gt;&lt;input type=&quot;password&quot; id=&quot;password&quot; name=&quot;password&quot;placeholder=&quot;请输入密码&quot;&gt;]]></content>
      <tags>
        <tag>html</tag>
        <tag>form</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从URL输入到页面展现发生了什么]]></title>
    <url>%2F2017%2F05%2F03%2F%E4%BB%8EURL%E8%BE%93%E5%85%A5%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%8E%B0%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%2F</url>
    <content type="text"><![CDATA[域名解析用户输入URL之后，浏览器根据所输入的URL中的域名，通过DNS查找出所对应IP地址，DNS的查找IP的顺序是： 浏览器缓存 系统缓存 路由器缓存 LDNS(本地区域名服务器) 查出IP地址后，将地址返回给浏览器并添加至缓存。 建立TCP连接浏览器在得到IP之后，开始与服务器建立连接，建立连接要经过三次握手： 主机发送一个带SYN标志的数据包给服务器 服务器回传一个带有SYN和ACK标志的数据包以示传达确认信息 主机再回传一个带ACK标志的数据包，代表“握手结束” 建立连接的三次握手中，若有一方没有接收到信号，则重新开始握手，三次握手执行完毕，则代表主机与服务器已建立连接。 网页请求连接建立之后，浏览器向服务器发送HTTP请求，请求报文中包括了所要请求获得的文件等信息，服务器响应后则会将对应的html代码发送给浏览器。 网页显示与渲染浏览器在得到html的同时，便开始解析html，构建网页，之后获取镶嵌在html中的资源，如css,js,图片，音频等…，将整个页面展现出来。]]></content>
      <tags>
        <tag>http</tag>
        <tag>html</tag>
      </tags>
  </entry>
</search>
